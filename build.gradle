plugins {
  id "groovy"
  id "com.github.hierynomus.license" version "0.12.1"
  id "org.ajoberstar.release-opinion" version "1.4.2"
  id "com.gradle.plugin-publish" version "0.9.4"
}

defaultTasks 'build'

group = 'com.hierynomus.gradle.plugins'

repositories { jcenter() }

dependencies {
  compile gradleApi()
  compile localGroovy()
  compile "org.scala-lang:scala-library:2.12.1"
  compile "org.scalariform:scalariform_2.12:0.2.6"
  testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
    exclude group: 'org.codehaus.groovy', module: 'groovy-all'
  }
  testCompile 'com.netflix.nebula:nebula-test:3.1.0'
}

release {
  grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
}

license {
  header = project.file("HEADER")
  mapping {
    java = 'SLASHSTAR_STYLE'
    groovy = 'SLASHSTAR_STYLE'
    scala = 'SLASHSTAR_STYLE'
  }
}

test {
  afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts { archives sourcesJar, javadocJar }

pluginBundle {
  website = "https://github.com/hierynomus/scalariform-gradle-plugin"
  vcsUrl = "https://github.com/hierynomus/scalariform-gradle-plugin.git"
  description = "Reformats Scala source code according to your configured conventions"
  plugins {
    scalariformPlugin {
      id = "com.github.hierynomus.scalariform"
      displayName = "Scalariform plugin for Gradle"
      tags = [ "gradle", "plugin", "scalariform", "scala", "formatting" ]
    }
  }
}

project.tasks.release.dependsOn project.tasks.publishPlugins
